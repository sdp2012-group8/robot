package sdp.common;

import static org.junit.Assert.*;

import java.io.IOException;
import java.util.Random;

import org.junit.Test;

import sdp.common.Communicator.opcode;

/**
 * 
 * This tests whether the MessageQueue fires event as expected at a Communicator. It
 * also tests the behavior of {@link MessageQueue.#cancelAllMessages()}.
 * 
 * @author martinmarinov
 *
 */
public class MessageQueueTest {
	
	/**
	 * The number of messages
	 */
	private static final int TEST_SIZE = 30;
	
	/**
	 * Maximum delay between two messages
	 */
	private static final int MAX_DELAY_TEST = 1000;
	
	/**
	 * Number of times {@link MessageQueue.#cancelAllMessages()} should be issued
	 */
	private static final int NUMBER_CANCELS = 4;
	
	// for private usage
	private int curr_message_id = 0;
	private long curr_time = 0;

	@Test
	public void test() {
		Random r = new Random();
		final long[] delays = new long[TEST_SIZE];
		final opcode[] opcodes = new opcode[TEST_SIZE];
		final short[] args = new short[TEST_SIZE];
		final MessageQueue mq = new MessageQueue(new Communicator() {
			
			@Override
			public void sendMessage(opcode op, short... args) throws IOException {
				long curr_delay = System.currentTimeMillis()-curr_time;
				assertTrue("Opcodes not equal", op == opcodes[curr_message_id]);
				assertTrue("Arguments not rqual", check_args(args));
				assertEquals("Event didn't fire at expected time", delays[curr_message_id], curr_delay, 10);
				curr_message_id++;
				curr_time = System.currentTimeMillis();
			}
			
			@Override
			public void close() {
				// this is not needed
			}

			@Override
			public void registerListener(MessageListener listener) {
				// not needed
			}
		});
		// initialize test
		for (int i = 0; i < TEST_SIZE; i++) {
			delays[i] = r.nextInt(MAX_DELAY_TEST);
			opcodes[i] = opcode.values()[r.nextInt(opcode.values().length)];
			args[i] = (byte) r.nextInt(127);
		}
		for (int t = 0; t < NUMBER_CANCELS; t++) {
			long total_delay = 0;
			curr_message_id = 0;
			int cutat = r.nextInt(TEST_SIZE);
			curr_time = System.currentTimeMillis();
			for (int i = 0; i < TEST_SIZE; i++) {
				if (i < cutat)
					total_delay+=delays[i];
				mq.addMessageToQueue(delays[i]/1000f, opcodes[i], create_args(args[i]));
			}
			System.out.println("Expected cancel in "+total_delay+" ms");
			try {
				Thread.sleep(total_delay+20);
			} catch (InterruptedException e) {
				e.printStackTrace();
			}
			assertEquals("Not all messages were sent!", cutat, curr_message_id);
			mq.cancelAllMessages();
			System.out.println("Cancel done. "+(NUMBER_CANCELS-t-1)+" remain.");
		}
	}
	
	/**
	 * Generates a byte array with given number of arguments.
	 * The contents are the numbers 0..n-1.
	 * @param number_of_args n
	 * @return byte with size n, containing numbers 0..n-1
	 */
	private short[] create_args(int number_of_args) {
		short[] ans = new short[number_of_args];
		for (int i = 0; i < number_of_args; i++)
			ans[i] = (short) i;
		return ans;
	}
	
	/**
	 * Checks whether the array has been generated by
	 * {@link #create_args(int)}
	 * @param args the arguments presumably created by the above method
	 * @return true if they are, false otherwise
	 */
	private boolean check_args(short[] args) {
		int number_of_args = args.length;
		for (int i = 0; i < number_of_args; i++)
			if (args[i] != (short) i)
				return false;
		return true;
	}

}
