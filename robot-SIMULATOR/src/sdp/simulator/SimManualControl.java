package sdp.simulator;

import java.awt.Color;
import java.awt.Dimension;
import java.awt.EventQueue;

import javax.swing.JFrame;
import javax.swing.JTextField;
import javax.swing.JComboBox;
import javax.swing.JButton;

import sdp.common.Communicator;
import sdp.common.MessageListener;
import sdp.common.Communicator.opcode;
import sdp.common.WorldState;
import sdp.common.WorldStateObserver;

import java.awt.event.ActionListener;
import java.awt.event.ActionEvent;
import java.awt.event.FocusEvent;
import java.awt.event.FocusListener;
import java.awt.event.KeyAdapter;
import java.awt.event.KeyEvent;
import java.util.Timer;
import java.util.TimerTask;

import javax.swing.JLabel;
import java.awt.event.WindowAdapter;
import java.awt.event.WindowEvent;

import javax.swing.JPanel;
import java.awt.Graphics;
import javax.swing.JRadioButton;

/**
 * 
 * This is the class that gives easy GUI way of sending raw commands to the brick.
 * 
 * Most of the code is automatically generated by the designer so it is a mess. Don't expect comments inside.
 * 
 * @author s0932707
 *
 */
public class SimManualControl {

	private JFrame frmManualNxtCommand;
	private JTextField textField;
	private JButton btnConnect;
	private VBrick mComm;
	private JPanel panel;
	
	private WorldState lastWS = null;

	/**
	 * Launch the application.
	 */
	public static void main(String[] args) {
		EventQueue.invokeLater(new Runnable() {
			public void run() {
				try {
					SimManualControl window = new SimManualControl();
					window.frmManualNxtCommand.setVisible(true);
				} catch (Exception e) {
					e.printStackTrace();
				}
			}
		});
	}

	/**
	 * Create the application.
	 */
	public SimManualControl() {
		initialize();
	}
	
	private Timer btn_W_pressed = null, btn_A_pressed = null, btn_S_pressed = null, btn_D_pressed = null, btn_SPACE_pressed = null, btn_ENTER_pressed = null;

	private int currentspeed = 0;
	private static final int max_speed = 35;
	private static final int turn_speed = 90;
	/**
	 * Initialize the contents of the frame.
	 */
	private void initialize() {
		frmManualNxtCommand = new JFrame();
		frmManualNxtCommand.addWindowListener(new WindowAdapter() {
			@Override
			public void windowClosing(WindowEvent arg0) {
				if (mComm == null)
					return;
				try {
					mComm.sendMessage(opcode.exit);
					Thread.sleep(100);
					mComm.close();
				} catch (Exception e) {
					e.printStackTrace();
				}
			}
		});
		frmManualNxtCommand.getContentPane().setFocusable(true);
		
		final JButton btnKick = new JButton("KICK");
		btnKick.setEnabled(false);
		btnKick.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent arg0) {
				try {
					mComm.sendMessage(opcode.kick);
				} catch (Exception e) {
					e.printStackTrace();
				}
			}
		});
		btnKick.setBounds(12, 75, 117, 25);
		frmManualNxtCommand.getContentPane().add(btnKick);
		
		final JButton btnMoveToWall = new JButton("Move to Wall");
		btnMoveToWall.setEnabled(false);
		btnMoveToWall.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent e) {
				try {
					mComm.sendMessage(opcode.move_to_wall);
				} catch (Exception ee) {
					ee.printStackTrace();
				}
			}
		});
		btnMoveToWall.setBounds(147, 75, 153, 25);
		frmManualNxtCommand.getContentPane().add(btnMoveToWall);
		
		final JButton btn_control_on = new JButton("Joypad ON");
		btn_control_on.setEnabled(false);
		btn_control_on.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent e) {
				frmManualNxtCommand.getContentPane().requestFocus();
			}
		});
		btn_control_on.setBounds(12, 119, 117, 25);
		
		final JLabel lblWAS = new JLabel("W A S D Space Enter");
		lblWAS.setBounds(147, 124, 268, 15);
		frmManualNxtCommand.getContentPane().add(lblWAS);
		
		frmManualNxtCommand.getContentPane().addFocusListener(new FocusListener() {
			
			@Override
			public void focusLost(FocusEvent arg0) {
				btn_control_on.setEnabled(true);
			}
			
			@Override
			public void focusGained(FocusEvent arg0) {
				btn_control_on.setEnabled(false);
			}
		});
		
		frmManualNxtCommand.getContentPane().addKeyListener(new KeyAdapter() {
			@Override
			public void keyPressed(KeyEvent arg0) {
				switch (arg0.getKeyCode()) {
				case KeyEvent.VK_UP:
				case KeyEvent.VK_W: 
					if (btn_W_pressed == null) {
						// if pressing button for first time
						lblWAS.setText("W");
						System.out.println("Sending W");
						try {
							mComm.sendMessage(opcode.operate, (byte) max_speed, (byte) 0);
							currentspeed = max_speed;
						} catch (Exception e) {
							e.printStackTrace();
						}
					} else {
						btn_W_pressed.cancel();
						btn_W_pressed = null;
					}

					break;
				case KeyEvent.VK_LEFT:
				case KeyEvent.VK_A: 
					if (btn_A_pressed == null) {
						// if pressing button for first time
						lblWAS.setText("A");
						System.out.println("Sending A");
						try {
							mComm.sendMessage(opcode.operate, (byte) currentspeed, (byte) turn_speed);
						} catch (Exception e) {
							e.printStackTrace();
						}
					} else {
						btn_A_pressed.cancel();
						btn_A_pressed = null;
					}

					break;
				case KeyEvent.VK_DOWN:
				case KeyEvent.VK_S: 
					if (btn_S_pressed == null) {
						// if pressing button for first time
						lblWAS.setText("S");
						System.out.println("Sending S");
						try {
							mComm.sendMessage(opcode.operate, (byte) -max_speed, (byte) 0);
							currentspeed = -max_speed;
						} catch (Exception e) {
							e.printStackTrace();
						}
					} else {
						btn_S_pressed.cancel();
						btn_S_pressed = null;
					}

					break;
				case KeyEvent.VK_RIGHT:
				case KeyEvent.VK_D: 
					if (btn_D_pressed == null) {
						// if pressing button for first time
						lblWAS.setText("D");
						System.out.println("Sending D");
						try {
							mComm.sendMessage(opcode.operate, (byte) currentspeed, (byte) -turn_speed);
						} catch (Exception e) {
							e.printStackTrace();
						}
					} else {
						btn_D_pressed.cancel();
						btn_D_pressed = null;
					}

					break;
				case KeyEvent.VK_SPACE: 
					if (btn_SPACE_pressed == null) {
						// if pressing button for first time
						lblWAS.setText("SPACE");
						System.out.println("Sending SPACE");
						try {
							mComm.sendMessage(opcode.play_sound);
						} catch (Exception e) {
							e.printStackTrace();
						}
					} else {
						btn_SPACE_pressed.cancel();
						btn_SPACE_pressed = null;
					}

					break;
				case KeyEvent.VK_ENTER:
					if (btn_ENTER_pressed == null) {
						// if pressing button for first time
						lblWAS.setText("ENTER");
						System.out.println("Sending ENTER");
						try {
							mComm.sendMessage(opcode.kick);
						} catch (Exception e) {
							e.printStackTrace();
						}
					} else {
						btn_ENTER_pressed.cancel();
						btn_ENTER_pressed = null;
					}
					break;
				}
			}


			@Override
			public void keyReleased(KeyEvent e) {
				switch (e.getKeyCode()) {
				case KeyEvent.VK_UP:
				case KeyEvent.VK_W: 
					btn_W_pressed = new Timer();
					btn_W_pressed.schedule(new TimerTask() {

						@Override
						public void run() {
							// TODO Auto-generated method stub
							lblWAS.setText(" ");
							System.out.println("Stopping W");
							try {
								mComm.sendMessage(opcode.operate, (byte) 0, (byte) 0);
								currentspeed = 0;
							} catch (Exception e) {
								e.printStackTrace();
							}
							btn_W_pressed.cancel();
							btn_W_pressed = null;
						}

					}, 60);
					break;
				case KeyEvent.VK_LEFT:
				case KeyEvent.VK_A: 
					btn_A_pressed = new Timer();
					btn_A_pressed.schedule(new TimerTask() {

						@Override
						public void run() {
							// TODO Auto-generated method stub
							lblWAS.setText(" ");
							System.out.println("Stopping A");
							btn_A_pressed.cancel();
							btn_A_pressed = null;
							try {
								mComm.sendMessage(opcode.operate, (byte) currentspeed, (byte) 0);
							} catch (Exception e) {
								e.printStackTrace();
							}
						}

					}, 60);
					break;
				case KeyEvent.VK_DOWN:
				case KeyEvent.VK_S: 
					btn_S_pressed = new Timer();
					btn_S_pressed.schedule(new TimerTask() {

						@Override
						public void run() {
							// TODO Auto-generated method stub
							lblWAS.setText(" ");
							System.out.println("Stopping S");
							try {
								mComm.sendMessage(opcode.operate, (byte) 0, (byte) 0);
								currentspeed = 0;
							} catch (Exception e) {
								e.printStackTrace();
							}
							btn_S_pressed.cancel();
							btn_S_pressed = null;
						}

					}, 60);
					break;
				case KeyEvent.VK_RIGHT:
				case KeyEvent.VK_D: 
					btn_D_pressed = new Timer();
					btn_D_pressed.schedule(new TimerTask() {

						@Override
						public void run() {
							// TODO Auto-generated method stub
							lblWAS.setText(" ");
							System.out.println("Stopping D");
							btn_D_pressed.cancel();
							btn_D_pressed = null;
							try {
								mComm.sendMessage(opcode.operate, (byte) currentspeed, (byte) 0);
							} catch (Exception e) {
								e.printStackTrace();
							}
						}

					}, 60);
					break;
				case KeyEvent.VK_SPACE: 
					btn_SPACE_pressed = new Timer();
					btn_SPACE_pressed.schedule(new TimerTask() {

						@Override
						public void run() {
							// TODO Auto-generated method stub
							lblWAS.setText(" ");
							System.out.println("Stopping SPACE");
							btn_SPACE_pressed.cancel();
							btn_SPACE_pressed = null;
						}

					}, 60);
					break;
				case KeyEvent.VK_ENTER:
					btn_ENTER_pressed = new Timer();
					btn_ENTER_pressed.schedule(new TimerTask() {

						@Override
						public void run() {
							// TODO Auto-generated method stub
							lblWAS.setText(" ");
							System.out.println("Stopping ENTER");
							btn_ENTER_pressed.cancel();
							btn_ENTER_pressed = null;
						}

					}, 60);
					break;
				}
			}
		});
		frmManualNxtCommand.setTitle("Manual NXT Command Sender");
		frmManualNxtCommand.setBounds(100, 100, 674, 685);
		frmManualNxtCommand.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
		frmManualNxtCommand.getContentPane().setLayout(null);

		final JComboBox comboBox = new JComboBox();
		final opcode[] ops = opcode.values();
		for (int i = 0; i < ops.length; i++)
			comboBox.addItem(ops[i]);
		comboBox.setBounds(12, 9, 166, 24);
		frmManualNxtCommand.getContentPane().add(comboBox);

		textField = new JTextField();
		textField.setBounds(190, 12, 246, 19);
		frmManualNxtCommand.getContentPane().add(textField);
		textField.setColumns(10);



		final JButton btnNewButton = new JButton("Send");
		btnNewButton.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent arg0) {
				opcode op = ops[comboBox.getSelectedIndex()];
				if (textField.getText().trim().length() == 0) {
					try {
						mComm.sendMessage(op);
					} catch (Exception e) {
						System.out.println("Can't send message");
					} finally {
						System.out.println("Message "+op+" sent with NO arguments");
					}
				}
				String[] sargs = textField.getText().split(",");
				byte[] args = new byte[sargs.length];
				for (int i = 0; i < args.length; i++) {
					try {
						args[i] = (byte) (int) Integer.parseInt(sargs[i].trim());
					} catch (Exception e) {
						System.out.println("Error sending message. Cannot parse argument '"+sargs[i].trim()+"'");
						return;
					}
				}
				try {
					mComm.sendMessage(op, args);
				} catch (Exception e) {
					System.out.println("Can't send message");
				} finally {
					System.out.println("Message "+op+" sent with "+args.length+" arguments");
				}
			}
		});
		btnNewButton.setEnabled(false);
		btnNewButton.setBounds(12, 38, 166, 25);
		frmManualNxtCommand.getContentPane().add(btnNewButton);
		


		final JRadioButton rdbtnBlueRobot = new JRadioButton("blue robot");
		rdbtnBlueRobot.setBounds(444, 8, 149, 23);
		frmManualNxtCommand.getContentPane().add(rdbtnBlueRobot);

		final JRadioButton rdbtnYellowRobot = new JRadioButton("yellow robot");
		rdbtnYellowRobot.setSelected(true);
		rdbtnYellowRobot.setBounds(444, 39, 149, 23);
		frmManualNxtCommand.getContentPane().add(rdbtnYellowRobot);


		btnConnect = new JButton("Connect");
		btnConnect.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent arg0) {
				btnConnect.setText("Wait...");
				btnConnect.setEnabled(false);
				boolean repeat = true;
				while (repeat) {
					try {
						mComm = new VBrick();
						mComm.registerListener(new MessageListener() {

							@Override
							public void receiveMessage(opcode op, byte[] args, Communicator controler) {
								System.out.println("New message "+op+" from BRICK");

							}
						});
						repeat = false;
					} catch (Exception e) {
						System.out.println("Connection failed. Reattempting...");
					}
				}
				btnConnect.setText("Ready!");
				btnNewButton.setEnabled(true);
				btnKick.setEnabled(true);
				btnMoveToWall.setEnabled(true);
				btn_control_on.setEnabled(!frmManualNxtCommand.getContentPane().hasFocus());
				Simulator sim = new Simulator();
				if (rdbtnBlueRobot.isSelected())
					sim.registerBlue(mComm, 20, 20);
				else
					sim.registerYellow(mComm, 20, 20);
				final WorldStateObserver obs = new WorldStateObserver(sim);
				new Thread() {
					public void run() {
						while (true) {
							lastWS = obs.getNextState();
							panel.repaint();
						}
					};
				}.start();

			}
		});
		btnConnect.setBounds(190, 38, 246, 25);
		frmManualNxtCommand.getContentPane().add(btnConnect);

		frmManualNxtCommand.getContentPane().add(btn_control_on);

		panel = new JPanel() {
			@Override
			protected void paintComponent(Graphics g) {
				Dimension d = this.getSize();
				if (lastWS != null) {
					synchronized (lastWS) {
						g.drawImage(lastWS.getWorldImage(), 0, 0, null);
					}

				} else {
					g.setColor(Color.gray);
					g.fillRect(0, 0, d.width, d.height);
				}
			}
		};
		panel.setBackground(Color.BLACK);
		panel.setBounds(12, 151, 640, 480);
		frmManualNxtCommand.getContentPane().add(panel);


	}
}
